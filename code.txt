//(1)
#include <bits/stdc++.h>
using namespace std;
#define faster ios_base::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);

typedef struct NODE{
	int data;
	struct NODE* next;
}NODE;

typedef struct STACK{
	NODE* top;
}STACK;

bool IsEmpty(STACK &s){
	return s.top == NULL;
}

void Push(STACK &s, int x){
	NODE* newNode = new NODE;
	newNode->data = x;
	newNode->next = s.top;
	s.top = newNode;
}

int Pop(STACK &s){
	if(IsEmpty(s)) return -1;
	NODE* temp = s.top;
	int data = temp->data;
	s.top = s.top->next;
	delete temp;
	return data;
}

void D_B(int n, STACK &s){
	while(n>0){
		Push(s, n%2);
		n/=2;
	}
}

void ShowStack(STACK &s){
	while(!IsEmpty(s)) cout << Pop(s);
}
int main(){
	STACK s;
	s.top = NULL;
	int n; cin >> n;
	D_B(n, s);
	ShowStack(s);
	return 0;
}
//(2)
#include <bits/stdc++.h>
using namespace std;
#define faster ios_base::sync_with_stdio(0); cin.tie(NULL);

int uutien(char c){
	if(c=='+' || c=='-') return 1;
	if(c=='*' || c=='/') return 2;
	return 0;
}

void Change(string infix){
	stack<char> st;
	string postfix = "";
	for(int i=0; i<infix.length(); i++){
		char c = infix[i];
		if(isalnum(c)) postfix += c;
		else if(c == '('){
			st.push(c);
		}
		else if(c== ')'){
			while(!st.empty() && st.top() != '('){
				postfix += st.top();
				st.pop();
			}
			st.pop();
		}
		else{
			while(!st.empty() && uutien(st.top()) >= uutien(c)){
				postfix += st.top();
				st.pop();
			}
			st.push(c);
		}
	}
	while(!st.empty()){
		postfix += st.top();
		st.pop();
	}
	cout << postfix << endl;
}
int main(){
	string infix;
	cin >> infix;
	Change(infix);
	return 0;
}
//(3)
#include <bits/stdc++.h>
using namespace std;
struct BenhNhan {
    int soThuTu;
    string hoTen;
    int tuoi;
};

struct Node {
    BenhNhan info;
    Node* next;
};

struct Queue {
    Node* pHead;
    Node* pTail;
};

int IsEmpty(Queue* q) {
    return q->pHead == nullptr;
}

void Init(Queue* q) {
    q->pHead = q->pTail = nullptr;
}

void Insert(Queue* q, BenhNhan bn) {
    Node* newNode = new Node;
    newNode->info = bn;
    newNode->next = nullptr;
    if (IsEmpty(q)) {
        q->pHead = q->pTail = newNode;
    } else {
        q->pTail->next = newNode;
        q->pTail = newNode;
    }
}

BenhNhan Remove(Queue* q, int& daKham) {
    if (IsEmpty(q)) {
        BenhNhan empty = {-1, "", -1};
        return empty;
    } else {
        Node* temp = q->pHead;
        BenhNhan bn = temp->info;
        q->pHead = q->pHead->next;
        delete temp;
        daKham++;
        return bn;
    }
}

void DisplayQueue(Queue* q) {
    if (IsEmpty(q)) {
        cout << "Hang doi rong!" << endl;
    } else {
        Node* current = q->pHead;
        while (current != nullptr) {
            cout << "So thu tu: " << current->info.soThuTu << ", Ho ten: " << current->info.hoTen << ", Tuoi: " << current->info.tuoi << endl;
            current = current->next;
        }
    }
}

int main() {
    Queue queue;
    Init(&queue);
    int choice;
    int soThuTu = 1;
    int daKham = 0;

    while (1) {
        cout << "\nMenu: \n";
        cout << "1. Them benh nhan vao hang doi\n";
        cout << "2. Lay benh nhan tiep theo cho kham\n";
        cout << "3. So luong nguoi da kham\n";
        cout << "4. Xuat danh sach benh nhan cho kham\n";
        cout << "5. Thoat\n";
        cout << "Chon chuc nang: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                BenhNhan bn;
                bn.soThuTu = soThuTu++;
                cout << "Nhap ho ten benh nhan: ";
                cin.ignore();
                getline(cin, bn.hoTen);
                cout << "Nhap tuoi benh nhan: ";
                cin >> bn.tuoi;
                Insert(&queue, bn);
                break;
            }

            case 2: {
                if (!IsEmpty(&queue)) {
                    BenhNhan bn = Remove(&queue, daKham);
                    cout << "Benh nhan tiep theo cho kham: \n";
                    cout << "So thu tu: " << bn.soThuTu << ", Ho ten: " << bn.hoTen << ", Tuoi: " << bn.tuoi << endl;
                } else {
                    cout << "Khong con benh nhan nao cho kham!" << endl;
                }
                break;
            }

            case 3:
                cout << "So luong nguoi da kham: " << daKham << endl;
                break;

            case 4:
                cout << "Danh sach benh nhan trong hang doi:\n";
                DisplayQueue(&queue);
                break;

            case 5:
                cout << "Ket thuc chuong trinh.\n";
                exit(0);

            default:
                cout << "Chon chuc nang khong hop le. Vui long chon lai!" << endl;
                break;
        }
    }

    return 0;
}
